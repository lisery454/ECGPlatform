<local:WindowBase x:Class="ECGPlatform.ShowECGWindow"
                  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                  xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                  xmlns:local="clr-namespace:ECGPlatform"
                  xmlns:ecgFile="clr-namespace:ECGFileService;assembly=ECGFileService"
                  xmlns:lvc="clr-namespace:LiveChartsCore.SkiaSharpView.WPF;assembly=LiveChartsCore.SkiaSharpView.WPF"
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                  Title="{DynamicResource ShowEcgWindowTitle}"
                  Width="2000"
                  Height="1100"
                  MinWidth=" 1000"
                  MinHeight="600"
                  d:DataContext="{d:DesignInstance Type=local:ShowECGWindowViewModel}"
                  Style="{StaticResource MainWindowStyle}"
                  WindowStartupLocation="CenterScreen"
                  mc:Ignorable="d">
  <i:Interaction.Triggers>
    <i:EventTrigger EventName="Loaded">
      <i:InvokeCommandAction Command="{Binding LoadDataCommand}" />
    </i:EventTrigger>
  </i:Interaction.Triggers>

  <Grid>
    <Grid d:Visibility="Hidden"
          Visibility="{Binding IsLoadingData, Converter={x:Static local:BoolToVisibilityConverter.InstanceCollapsedTrueForVisible}}">
      <TextBlock FontSize="50"
                 Text="IsLoading..." />
    </Grid>

    <Grid x:Name="GridBackground"
          d:Visibility="Visible"
          Visibility="{Binding IsLoadingData, Converter={x:Static local:BoolToVisibilityConverter.InstanceCollapsedFalseForVisible}}">
      <i:Interaction.Triggers>
        <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=Visibility}"
                       Value="{x:Static Visibility.Visible}">
          <i:ControlStoryboardAction ControlStoryboardOption="Play">
            <i:ControlStoryboardAction.Storyboard>
              <Storyboard>
                <DoubleAnimation Storyboard.TargetName="TranslateTransform"
                                 Storyboard.TargetProperty="Y"
                                 From="30"
                                 To="0"
                                 Duration="0:0:0.500">
                  <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseOut" />
                  </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <DoubleAnimation Storyboard.TargetName="GridBackground"
                                 Storyboard.TargetProperty="Opacity"
                                 From="0"
                                 To="1"
                                 Duration="0:0:0.500">
                  <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseOut" />
                  </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
              </Storyboard>
            </i:ControlStoryboardAction.Storyboard>
          </i:ControlStoryboardAction>
        </i:DataTrigger>
      </i:Interaction.Triggers>

      <Grid.RenderTransform>
        <TranslateTransform x:Name="TranslateTransform" />
      </Grid.RenderTransform>

      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>

      <!--  row = 0  -->
      <Grid Grid.Row="0"
            Height="50"
            Margin="0,16,0,12">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Border Grid.Column="0"
                Margin="20,0,10,0"
                Background="{DynamicResource BrushPrimary10OnMain}"
                CornerRadius="10" />

        <Border Grid.Column="1"
                Margin="10,0,20,0"
                Background="{DynamicResource BrushPrimary10OnMain}"
                CornerRadius="10">
          <Grid Margin="10,0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock FontFamily="{StaticResource ChillRoundGothicRegular}"
                       FontSize="14"
                       Foreground="{DynamicResource BrushOpposite80OnMain}"
                       HorizontalAlignment="Left"
                       Margin="5,2"
                       Text="{Binding CurrentHighlightPointData, Converter={x:Static local:HighlightPointDataToStrConverter.Instance}}"
                       TextAlignment="Center"
                       VerticalAlignment="Center" />
            <StackPanel Grid.Column="2"
                        Orientation="Horizontal">
              <ComboBox Margin="5,8"
                        ItemsSource="{local:EnumBindingSource EnumType=ecgFile:RPeakLabel}"
                        SelectedItem="{Binding CreateRPeakLabel}"
                        Visibility="{Binding CurrentHighlightPointData, Converter={x:Static local:HighlightPointDataToVisibilityConverter.Instance}, ConverterParameter={x:Static ecgFile:PointType.SIMPLE_POINT}}">
                <ComboBox.ItemTemplate>
                  <DataTemplate>
                    <TextBlock Text="{Binding ., Converter={x:Static local:RPeakLabelToStrConverter.Instance}}" />
                  </DataTemplate>
                </ComboBox.ItemTemplate>
              </ComboBox>
              <Button Command="{Binding CreateRPointCommand}"
                      Content="{DynamicResource CreateRStr}"
                      Margin="5,8"
                      Visibility="{Binding CurrentHighlightPointData, Converter={x:Static local:HighlightPointDataToVisibilityConverter.Instance}, ConverterParameter={x:Static ecgFile:PointType.SIMPLE_POINT}}" />
              <ComboBox Margin="5,8"
                        ItemsSource="{local:EnumBindingSource EnumType=ecgFile:RPeakLabel}"
                        SelectedItem="{Binding UpdateRPeakLabel}"
                        Visibility="{Binding CurrentHighlightPointData, Converter={x:Static local:HighlightPointDataToVisibilityConverter.Instance}, ConverterParameter={x:Static ecgFile:PointType.R_PEAKS_POINT}}">
                <ComboBox.ItemTemplate>
                  <DataTemplate>
                    <TextBlock Text="{Binding ., Converter={x:Static local:RPeakLabelToStrConverter.Instance}}" />
                  </DataTemplate>
                </ComboBox.ItemTemplate>
              </ComboBox>
              <Button Command="{Binding UpdateRPointCommand}"
                      Content="{DynamicResource UpdateRStr}"
                      Margin="5,8"
                      Visibility="{Binding CurrentHighlightPointData, Converter={x:Static local:HighlightPointDataToVisibilityConverter.Instance}, ConverterParameter={x:Static ecgFile:PointType.R_PEAKS_POINT}}" />
              <Button Command="{Binding DeleteRPointCommand}"
                      Content="{DynamicResource DeleteRStr}"
                      Margin="5,8"
                      Visibility="{Binding CurrentHighlightPointData, Converter={x:Static local:HighlightPointDataToVisibilityConverter.Instance}, ConverterParameter={x:Static ecgFile:PointType.R_PEAKS_POINT}}" />
            </StackPanel>
          </Grid>
        </Border>

      </Grid>

      <!--  row = 1  -->
      <Grid Grid.Row="1"
            Margin="0,0,0,12">
        <Border Grid.Column="0"
                Margin="20,0,20,0"
                Padding="12"
                Background="{DynamicResource BrushPrimary10OnMain}"
                CornerRadius="10">

          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="30" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Grid Margin="0,5,0,0">
              <Canvas x:Name="LabelTextCanvas" />
              <Canvas x:Name="IntervalTextCanvas" />
            </Grid>

            <ScrollViewer Grid.Row="1"
                          Style="{StaticResource VerticalScrollViewer}">
              <Grid>
                <Border x:Name="ChartBorder">
                  <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SizeChanged">
                      <i:InvokeCommandAction Command="{Binding ChartBorderSizeChangedCommand}"
                                             CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Border}}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Loaded">
                      <i:InvokeCommandAction Command="{Binding ChartBorderSizeChangedCommand}"
                                             CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Border}}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                      <i:InvokeCommandAction Command="{Binding Chart_OnMouseLeftButtonUpCommand}"
                                             PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                      <i:InvokeCommandAction Command="{Binding Chart_OnMouseLeftButtonDownCommand}"
                                             PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                      <i:InvokeCommandAction Command="{Binding Chart_OnMouseMoveCommand}"
                                             PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                  </i:Interaction.Triggers>
                  <lvc:CartesianChart Width="{Binding Width}"
                                      Height="{Binding Height}"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      DrawMarginFrame="{Binding DrawMarginFrame}"
                                      EasingFunction="{x:Null}"
                                      Series="{Binding Series}"
                                      TooltipPosition="Hidden"
                                      UpdateStartedCommand="{Binding ChartUpdatedCommand}"
                                      XAxes="{Binding XAxes}"
                                      YAxes="{Binding YAxes}"
                                      x:Name="CartesianChart">
                    <i:Interaction.Triggers>
                      <i:EventTrigger EventName="MouseWheel">
                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext.ChartMouseWheelCommand}"
                                               PassEventArgsToCommand="True" />
                      </i:EventTrigger>
                    </i:Interaction.Triggers>
                  </lvc:CartesianChart>
                </Border>
                <Canvas x:Name="RPeakPointCanvas" />
                <Canvas x:Name="SimplePointCanvas" />
                <Canvas x:Name="WaveLabelCanvas" />
              </Grid>
            </ScrollViewer>
          </Grid>
        </Border>
      </Grid>

      <!--  row = 2  -->
      <Grid Grid.Row="2"
            Margin="0,0,0,12">
        <Border Grid.Column="0"
                Margin="20,0,20,0"
                Background="{DynamicResource BrushPrimary10OnMain}"
                CornerRadius="10">
          <Grid Margin="20,0">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <lvc:CartesianChart XAxes="{Binding PartRIntervalXAxes}"
                                YAxes="{Binding PartRIntervalYAxes}"
                                DrawMarginFrame="{Binding PartRIntervalDrawMarginFrame}"
                                Sections="{Binding PartThumbs}"
                                Series="{Binding PartRIntervalSeries}"
                                PointerMoveCommand="{Binding PartRIntervalPointerMoveCommand}"
                                PointerPressedCommand="{Binding PartRIntervalPointerDownCommand}"
                                PointerReleasedCommand="{Binding PartRIntervalPointerUpCommand}"
                                EasingFunction="{x:Null}"
                                Height="80"
                                TooltipPosition="Hidden" />
            <lvc:CartesianChart XAxes="{Binding RIntervalXAxes}"
                                YAxes="{Binding RIntervalYAxes}"
                                DrawMarginFrame="{Binding RIntervalDrawMarginFrame}"
                                Sections="{Binding Thumbs}"
                                Series="{Binding RIntervalSeries}"
                                PointerMoveCommand="{Binding RIntervalPointerMoveCommand}"
                                PointerPressedCommand="{Binding RIntervalPointerDownCommand}"
                                PointerReleasedCommand="{Binding RIntervalPointerUpCommand}"
                                UpdateStartedCommand="{Binding RIntervalChartUpdatedCommand}"
                                EasingFunction="{x:Null}"
                                Grid.Row="1"
                                Height="80"
                                TooltipPosition="Hidden" />
          </Grid>
        </Border>
      </Grid>

      <!--  row = 3  -->
      <Border Grid.Row="3"
              Height="50"
              Margin="20,0,20,20"
              Background="{DynamicResource BrushPrimary10OnMain}"
              CornerRadius="10">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>

          <!--  current time  -->
          <Border Height="35"
                  Margin="8,0"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  BorderBrush="{DynamicResource BrushPrimary50OnMain}"
                  BorderThickness="2"
                  CornerRadius="10">
            <StackPanel Margin="16,0"
                        Orientation="Horizontal">
              <TextBlock HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         Text="{DynamicResource CurrentTimeTitle}"
                         TextAlignment="Center" />
              <TextBlock Margin="10,0"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         Text=": "
                         TextAlignment="Center" />
              <TextBox MaxWidth="100"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Background="Transparent"
                       BorderBrush="Transparent"
                       BorderThickness="0"
                       CaretBrush="{DynamicResource BrushOpposite80OnMain}"
                       ContextMenu="{x:Null}"
                       FontFamily="{StaticResource ChillRoundGothicRegular}"
                       FontSize="14"
                       Foreground="{DynamicResource BrushOpposite90OnMain}"
                       SelectionBrush="{DynamicResource BrushPrimaryAlpha50}"
                       Text="{Binding TextBoxInputCurrentTimeStr, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                       TextAlignment="Center">
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="LostKeyboardFocus">
                    <i:InvokeCommandAction Command="{Binding CurrentTimeTextBox_OnLostKeyboardFocusCommand}" />
                  </i:EventTrigger>
                  <i:EventTrigger EventName="PreviewTextInput">
                    <i:InvokeCommandAction Command="{Binding CurrentTimeTextBox_OnTextInputCommand}"
                                           PassEventArgsToCommand="True" />
                  </i:EventTrigger>
                </i:Interaction.Triggers>
              </TextBox>
              <TextBlock Margin="10,0"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         Text="-"
                         TextAlignment="Center" />
              <TextBlock HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         d:Text="0:0:1.234"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         TextAlignment="Center">
                <TextBlock.Text>
                  <MultiBinding Converter="{x:Static local:CurrentTimeIntervalConverter.Instance}">
                    <Binding Path="CurrentTime" />
                    <Binding Path="TimeInterval" />
                  </MultiBinding>
                </TextBlock.Text>
              </TextBlock>
            </StackPanel>
          </Border>
          <!--  slider  -->
          <Slider Grid.Column="1"
                  Margin="20,0"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Center"
                  Delay="20"
                  Maximum="{Binding AllMilliSeconds}"
                  Minimum="0"
                  Style="{StaticResource HorizontalSlider}">
            <i:Interaction.Triggers>
              <i:EventTrigger EventName="ValueChanged">
                <i:InvokeCommandAction Command="{Binding SliderValueChangedCommand}"
                                       PassEventArgsToCommand="True" />
              </i:EventTrigger>
            </i:Interaction.Triggers>
          </Slider>
          <!--  all Time  -->
          <Border Grid.Column="2"
                  Height="35"
                  Margin="8,0"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  BorderBrush="{DynamicResource BrushPrimary50OnMain}"
                  BorderThickness="2"
                  CornerRadius="10">
            <StackPanel Margin="16,0"
                        Orientation="Horizontal">
              <TextBlock HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         Text="{DynamicResource AllTimeTitle}"
                         TextAlignment="Center" />
              <TextBlock Margin="10,0"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         Text=": "
                         TextAlignment="Center" />
              <TextBlock HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         FontFamily="{StaticResource ChillRoundGothicRegular}"
                         FontSize="14"
                         Foreground="{DynamicResource BrushOpposite90OnMain}"
                         Text="{Binding AllMilliSeconds, Converter={x:Static local:LongTimeToStringConverter.Instance}}"
                         TextAlignment="Center" />
            </StackPanel>
          </Border>
        </Grid>
      </Border>


    </Grid>
  </Grid>
</local:WindowBase>